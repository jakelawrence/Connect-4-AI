{"version":3,"sources":["components/node.jsx","components/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","row","isEmpty","isPlayer","isAI","isSelector","isWinningPiece","onClick","extraClassName","backGroundClass","winningClass","className","id","Component","CENTER_COLUMN","Math","floor","COLUMNS","Board","state","grid","winnerColor","winner","gameOver","drawBoard","setState","ROWS","piece","newGrid","dropPiece","forWinPlayer","checkForWin","isWin","finalGrid","highlightWin","minimaxReturn","minimax","console","log","rowAI","getNextOpenRow","move","getNewGrid","forWinAI","map","rowIdx","key","node","nodeIdx","style","backgroundColor","handleClick","color","turn","best","score","Infinity","getValidDrops","forEach","gridCopy","JSON","parse","stringify","newBoard","moveScore","min","max","alpha","beta","currentDepth","isTerminalGrid","evaluateEnd","evaluateNonEnd","legalMoves","i","length","r","c","window","evaluateWindow","ai_pieces","player_pieces","empty_pieces","validRows","push","validDrops","fourInARow","one","two","three","four","currentRow","createNode","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92171d9d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./node.css\";\n\nclass Node extends Component {\n  render() {\n    const {\n      col,\n      row,\n      isEmpty,\n      isPlayer,\n      isAI,\n      isSelector,\n      isWinningPiece,\n      onClick,\n    } = this.props;\n    const extraClassName = isEmpty\n      ? \"piece-empty\"\n      : isPlayer\n      ? \"piece-player\"\n      : isAI\n      ? \"piece-AI\"\n      : isSelector\n      ? \"piece-selector\"\n      : \"\";\n    const backGroundClass = isSelector\n      ? \"selectorBackgound\"\n      : \"pieceBackground\";\n\n    const winningClass = isWinningPiece ? \"winningPiece\" : \"\";\n    return (\n      <div className={`${backGroundClass}`}>\n        <div\n          id={`piece-${row}-${col}`}\n          className={`piece ${extraClassName} ${winningClass}`}\n          onClick={() => onClick(col)}\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport Node from \"./node.jsx\";\n\nimport \"./board.css\";\n\nconst ROWS = 7;\nconst COLUMNS = 7;\nconst PLAYER = 1;\nconst AI = 2;\nconst DEPTH = 5;\nconst CENTER_COLUMN = Math.floor(COLUMNS / 2);\n\nclass Board extends Component {\n  state = {\n    grid: [],\n    winnerColor: \"\",\n    winner: \"\",\n    gameOver: false,\n  };\n\n  componentDidMount() {\n    const grid = drawBoard();\n    this.setState({ grid });\n  }\n\n  handleClick(col) {\n    if (!this.state.gameOver) {\n      if (this.state.grid[ROWS - 2][col].piece === 0) {\n        let newGrid = dropPiece(this.state.grid, col, PLAYER);\n        this.setState({ grid: newGrid });\n        let forWinPlayer = checkForWin(this.state.grid, PLAYER);\n        if (forWinPlayer.isWin) {\n          let finalGrid = highlightWin(forWinPlayer, this.state.grid);\n          this.setState({\n            grid: finalGrid,\n            winner: \"YOU WIN!\",\n            winnerColor: \"red\",\n            gameOver: true,\n          });\n          return;\n        }\n        let minimaxReturn = minimax(this.state.grid);\n        console.log(minimaxReturn);\n        let rowAI = getNextOpenRow(minimaxReturn.move, this.state.grid);\n        if (rowAI < ROWS - 1) {\n          let newGrid = getNewGrid(\n            rowAI,\n            minimaxReturn.move,\n            this.state.grid,\n            AI\n          );\n          this.setState({ grid: newGrid });\n          let forWinAI = checkForWin(this.state.grid, AI);\n          if (forWinAI.isWin) {\n            let finalGrid = highlightWin(forWinAI, this.state.grid);\n            this.setState({\n              grid: finalGrid,\n              winner: \"AI WINS!\",\n              winnerColor: \"gold\",\n              gameOver: true,\n            });\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <div className=\"backdrop\">\n        <div className=\"head\">\n          <div className=\"title\">Connect 4</div>\n        </div>\n        <div className=\"main\">\n          <div className=\"grid\">\n            {grid.map((row, rowIdx) => {\n              return (\n                <div className=\"row\" key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const {\n                      row,\n                      col,\n                      isEmpty,\n                      isPlayer,\n                      isAI,\n                      isSelector,\n                      isWinningPiece,\n                    } = node;\n\n                    return (\n                      <Node\n                        style={{ backgroundColor: \"blue\" }}\n                        key={nodeIdx}\n                        col={col}\n                        row={row}\n                        isEmpty={isEmpty}\n                        isPlayer={isPlayer}\n                        isAI={isAI}\n                        isSelector={isSelector}\n                        isWinningPiece={isWinningPiece}\n                        onClick={(col, grid) => this.handleClick(col)}\n                      ></Node>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"foot\">\n          <div style={{ color: this.state.winnerColor }} className=\"title\">\n            {this.state.winner}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst dropPiece = (grid, col, turn) => {\n  let row = getNextOpenRow(col, grid);\n  if (row < ROWS - 1) {\n    let newGrid = getNewGrid(row, col, grid, turn);\n    return newGrid;\n  }\n};\n\nconst minimax = (grid) => {\n  let best = {\n    move: null,\n    score: -Infinity,\n  };\n\n  let alpha = -Infinity;\n  let beta = Infinity;\n  let legalMoves = getValidDrops(grid);\n  legalMoves.forEach((col) => {\n    let gridCopy = JSON.parse(JSON.stringify(grid));\n    let newBoard = dropPiece(gridCopy, col, AI);\n    let moveScore = min(newBoard, alpha, beta, 1);\n\n    if (moveScore >= best.score) {\n      best.score = moveScore;\n      best.move = col;\n    }\n  });\n  return best;\n};\n\nconst max = (grid, alpha, beta, currentDepth) => {\n  if (isTerminalGrid(grid)) {\n    return evaluateEnd(grid);\n  } else if (currentDepth === DEPTH) {\n    return evaluateNonEnd(grid);\n  } else {\n    let score = -Infinity;\n    let legalMoves = getValidDrops(grid);\n\n    for (let i = 0; i < legalMoves.length; i++) {\n      let gridCopy = JSON.parse(JSON.stringify(grid));\n      let newBoard = dropPiece(gridCopy, legalMoves[i], AI);\n      let moveScore = min(newBoard, alpha, beta, currentDepth + 1);\n      score = Math.max(score, moveScore);\n      alpha = Math.max(alpha, score);\n      if (alpha >= beta) {\n        break;\n      }\n    }\n\n    return score;\n  }\n};\n\nconst min = (grid, alpha, beta, currentDepth) => {\n  if (isTerminalGrid(grid)) {\n    return evaluateEnd(grid);\n  } else if (currentDepth === DEPTH) {\n    return evaluateNonEnd(grid);\n  } else {\n    let score = Infinity;\n    let legalMoves = getValidDrops(grid);\n    for (let i = 0; i < legalMoves.length; i++) {\n      let gridCopy = JSON.parse(JSON.stringify(grid));\n      let newBoard = dropPiece(gridCopy, legalMoves[i], PLAYER);\n      let moveScore = max(newBoard, alpha, beta, currentDepth + 1);\n      score = Math.min(score, moveScore);\n      beta = Math.min(beta, score);\n      if (alpha >= beta) {\n        break;\n      }\n    }\n\n    return score;\n  }\n};\n\nconst evaluateEnd = (grid) => {\n  if (checkForWin(grid, AI).isWin === true) {\n    return 10000000;\n  } else if (checkForWin(grid, PLAYER).isWin === true) {\n    return -10000000;\n  } else {\n    return 0;\n  }\n};\n\nconst evaluateNonEnd = (grid) => {\n  let score = 0;\n  //score center column, more opportunities with the center column\n  for (let row = 0; row < ROWS - 1; row++) {\n    if (grid[row][CENTER_COLUMN].piece === AI) {\n      score += 3;\n    }\n  }\n  //score horizontal opportunities\n  for (let r = 0; r < ROWS - 1; r++) {\n    for (let c = 0; c < COLUMNS - 3; c++) {\n      let window = [grid[r][c], grid[r][c + 1], grid[r][c + 2], grid[r][c + 3]];\n      score += evaluateWindow(window);\n    }\n  }\n  //score vertical opportunities\n  for (let c = 0; c < COLUMNS; c++) {\n    for (let r = 0; r < ROWS - 4; r++) {\n      let window = [grid[r][c], grid[r + 1][c], grid[r + 2][c], grid[r + 3][c]];\n      score += evaluateWindow(window);\n    }\n  }\n\n  for (let c = 0; c < COLUMNS - 3; c++) {\n    for (let r = 0; r < ROWS - 4; r++) {\n      let window = [\n        grid[r][c],\n        grid[r + 1][c + 1],\n        grid[r + 2][c + 2],\n        grid[r + 3][c + 3],\n      ];\n      score += evaluateWindow(window);\n    }\n  }\n\n  for (let c = 0; c < COLUMNS - 3; c++) {\n    for (let r = 3; r < ROWS - 1; r++) {\n      let window = [\n        grid[r][c],\n        grid[r - 1][c + 1],\n        grid[r - 2][c + 2],\n        grid[r - 3][c + 3],\n      ];\n      score += evaluateWindow(window);\n    }\n  }\n\n  return score;\n};\n\nconst evaluateWindow = (window) => {\n  let score = 0;\n  let ai_pieces = 0;\n  let player_pieces = 0;\n  let empty_pieces = 0;\n  for (let i = 0; i < window.length; i++) {\n    switch (window[i].piece) {\n      case AI:\n        ai_pieces++;\n        break;\n      case PLAYER:\n        player_pieces++;\n        break;\n      default:\n        empty_pieces++;\n    }\n  }\n  if (ai_pieces === 4) {\n    score += 100;\n  } else if (ai_pieces === 3 && empty_pieces === 1) {\n    score += 5;\n  }\n\n  if (player_pieces === 3 && empty_pieces === 1) {\n    score -= 4;\n  }\n  return score;\n};\n\nconst getValidDrops = (grid) => {\n  let validRows = [];\n  for (let c = 0; c < COLUMNS; c++) {\n    if (grid[ROWS - 2][c].piece === 0) {\n      validRows.push(c);\n    }\n  }\n  return validRows;\n};\n\nconst isTerminalGrid = (grid) => {\n  let validDrops = getValidDrops(grid);\n  if (\n    checkForWin(grid, PLAYER).isWin ||\n    checkForWin(grid, AI).isWin ||\n    validDrops.length === 0\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst checkForWin = (grid, turn) => {\n  //check horizontal wins\n  let fourInARow = {\n    isWin: false,\n    one: {\n      r: 0,\n      c: 0,\n    },\n    two: {\n      r: 0,\n      c: 0,\n    },\n    three: {\n      r: 0,\n      c: 0,\n    },\n    four: {\n      r: 0,\n      c: 0,\n    },\n  };\n  for (let c = 0; c < COLUMNS - 3; c++) {\n    for (let r = 0; r < ROWS - 1; r++) {\n      if (\n        grid[r][c].piece === turn &&\n        grid[r][c + 1].piece === turn &&\n        grid[r][c + 2].piece === turn &&\n        grid[r][c + 3].piece === turn\n      ) {\n        fourInARow.one.r = r;\n        fourInARow.one.c = c;\n        fourInARow.two.r = r;\n        fourInARow.two.c = c + 1;\n        fourInARow.three.r = r;\n        fourInARow.three.c = c + 2;\n        fourInARow.four.r = r;\n        fourInARow.four.c = c + 3;\n        fourInARow.isWin = true;\n        return fourInARow;\n      }\n    }\n  }\n  //check vertical wins\n  for (let c = 0; c < COLUMNS; c++) {\n    for (let r = 0; r < ROWS - 4; r++) {\n      if (\n        grid[r][c].piece === turn &&\n        grid[r + 1][c].piece === turn &&\n        grid[r + 2][c].piece === turn &&\n        grid[r + 3][c].piece === turn\n      ) {\n        fourInARow.one.r = r;\n        fourInARow.one.c = c;\n        fourInARow.two.r = r + 1;\n        fourInARow.two.c = c;\n        fourInARow.three.r = r + 2;\n        fourInARow.three.c = c;\n        fourInARow.four.r = r + 3;\n        fourInARow.four.c = c;\n        fourInARow.isWin = true;\n        return fourInARow;\n      }\n    }\n  }\n  //check for upward diagonal wins\n  for (let c = 0; c < COLUMNS - 3; c++) {\n    for (let r = 0; r < ROWS - 4; r++) {\n      if (\n        grid[r][c].piece === turn &&\n        grid[r + 1][c + 1].piece === turn &&\n        grid[r + 2][c + 2].piece === turn &&\n        grid[r + 3][c + 3].piece === turn\n      ) {\n        fourInARow.one.r = r;\n        fourInARow.one.c = c;\n        fourInARow.two.r = r + 1;\n        fourInARow.two.c = c + 1;\n        fourInARow.three.r = r + 2;\n        fourInARow.three.c = c + 2;\n        fourInARow.four.r = r + 3;\n        fourInARow.four.c = c + 3;\n        fourInARow.isWin = true;\n        return fourInARow;\n      }\n    }\n  }\n  //check for downward diagonal wins\n  for (let c = 0; c < COLUMNS - 3; c++) {\n    for (let r = 3; r < ROWS - 1; r++) {\n      if (\n        grid[r][c].piece === turn &&\n        grid[r - 1][c + 1].piece === turn &&\n        grid[r - 2][c + 2].piece === turn &&\n        grid[r - 3][c + 3].piece === turn\n      ) {\n        fourInARow.one.r = r;\n        fourInARow.one.c = c;\n        fourInARow.two.r = r - 1;\n        fourInARow.two.c = c + 1;\n        fourInARow.three.r = r - 2;\n        fourInARow.three.c = c + 2;\n        fourInARow.four.r = r - 3;\n        fourInARow.four.c = c + 3;\n        fourInARow.isWin = true;\n        return fourInARow;\n      }\n    }\n  }\n  return fourInARow;\n};\n\nconst highlightWin = (fourInARow, grid) => {\n  grid[fourInARow.one.r][fourInARow.one.c].isWinningPiece = true;\n  grid[fourInARow.two.r][fourInARow.two.c].isWinningPiece = true;\n  grid[fourInARow.three.r][fourInARow.three.c].isWinningPiece = true;\n  grid[fourInARow.four.r][fourInARow.four.c].isWinningPiece = true;\n  return grid;\n};\n\nconst getNextOpenRow = (col, grid) => {\n  for (let row = 0; row < ROWS - 1; row++) {\n    if (grid[row][col].piece === 0) {\n      return row;\n    }\n  }\n  return Infinity;\n};\n\nconst getNewGrid = (row, col, grid, turn) => {\n  grid[row][col].piece = turn;\n  if (turn === PLAYER) {\n    grid[row][col].isPlayer = true;\n  } else {\n    grid[row][col].isAI = true;\n  }\n  grid[row][col].isEmpty = false;\n\n  return grid;\n};\n\nconst drawBoard = () => {\n  const grid = [];\n  for (let row = 0; row < ROWS; row++) {\n    const currentRow = [];\n    for (let col = 0; col < COLUMNS; col++) {\n      currentRow.push(createNode(col, row, 0));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row, piece) => {\n  return {\n    col,\n    row,\n    piece,\n    isEmpty: row !== ROWS - 1,\n    isPlayer: false,\n    isAI: false,\n    isSelector: row === ROWS - 1,\n    isWinningPiece: false,\n  };\n};\n\nexport default Board;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Board from \"./components/board\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}